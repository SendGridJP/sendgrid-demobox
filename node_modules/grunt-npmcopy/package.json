{
  "name": "grunt-npmcopy",
  "version": "0.1.0",
  "description": "NPM on the front-end without the cruft.",
  "homepage": "https://github.com/timmywil/grunt-npmcopy",
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "git://github.com/timmywil/grunt-npmcopy.git"
  },
  "bugs": {
    "url": "https://github.com/timmywil/grunt-npmcopy/issues"
  },
  "author": {
    "name": "Timmy Willison",
    "email": "timmywillisn@gmail.com",
    "url": "http://timmywillison.com"
  },
  "keywords": [
    "gruntplugin",
    "npmcopy",
    "npm",
    "copy",
    "package",
    "package manager"
  ],
  "engines": {
    "node": ">= 0.10.0"
  },
  "dependencies": {
    "glob": "^4.0.2",
    "lodash": "^2.4.1"
  },
  "devDependencies": {
    "grunt": "^0.4.5",
    "grunt-contrib-clean": "^0.5.0",
    "grunt-contrib-jshint": "^0.10.0",
    "grunt-contrib-nodeunit": "^0.4.0",
    "grunt-contrib-watch": "^0.6.1",
    "grunt-jscs-checker": "^0.5.1",
    "grunt-jsonlint": "^1.0.4",
    "jquery": "2.1.1",
    "jquery-ui": "1.10.5",
    "jquery.onoff": "^0.3.6",
    "jquery.panzoom": "2.0.5",
    "load-grunt-tasks": "^0.5.0"
  },
  "scripts": {
    "test": "grunt test"
  },
  "readme": "# grunt-npmcopy\n[![Build Status](https://travis-ci.org/timmywil/grunt-npmcopy.png?branch=master)](https://travis-ci.org/timmywil/grunt-npmcopy)\n\n> NPM for the front-end without the cruft.\n\n- Use NPM as your front-end package manager without making `node_modules` public.\n- Position your front-end dependencies where you want them in your repository.\n- Conveniently facilitates [tracking your front-end dependencies](http://addyosmani.com/blog/checking-in-front-end-dependencies/).\n\n## Workflow\n\nWhenever you add a new front-end dependency with NPM, add which file should be copied and where to your Gruntfile `\"npmcopy\"` config. Then, run `grunt npmcopy`.\n\n## Getting Started\nThis plugin requires Grunt.\n\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\n\n```shell\nnpm install grunt-npmcopy --save-dev\n```\n\nOnce the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\n\n```js\ngrunt.loadNpmTasks('grunt-npmcopy');\n```\n\n*Note: have a look at [load-grunt-tasks](https://github.com/sindresorhus/load-grunt-tasks) so you can skip this step for all your grunt plugins.*\n\n## The \"npmcopy\" task\n\n### Overview\nIn your project's Gruntfile, add a section named `npmcopy` to the data object passed into `grunt.initConfig()`.\n\n```js\ngrunt.initConfig({\n\tnpmcopy: {\n\t\toptions: {\n\t\t\t// Task-specific options go here\n\t\t},\n\t\tyour_target: {\n\t\t\t// Target-specific file lists and/or options go here\n\t\t}\n\t}\n});\n```\n\n### Options\n\n#### options.srcPrefix\nType: `String`  \nDefault value: '`node_modules`'\n\n`srcPrefix` will prefix your source locations with the correct folder location.\n\n#### options.destPrefix\nType: `String`  \nDefault value: `''`\n\n`destPrefix` will be used as the prefix for destinations.\n\n#### options.report\nType: `Boolean`  \nDefault value: `false`\n\nTo help ensure you didn't miss any, report any modules in your package.json that have not been configured to copy at least one file with `npmcopy`.\n\n#### options.copyOptions\nType: `Object`  \nDefault value: `{}`\n\nOptions to pass to `grunt.file.copy` when copying the files. See [grunt.file.copy](http://gruntjs.com/api/grunt.file#grunt.file.copy)\n\n### Usage Examples\n\n```js\ngrunt.initConfig({\n\tnpmcopy: {\n\t\t// Anything can be copied\n\t\ttest: {\n\t\t\toptions: {\n\t\t\t\tdestPrefix: 'test/js'\n\t\t\t},\n\t\t\tfiles: {\n\t\t\t\t// Keys are destinations (prefixed with `options.destPrefix`)\n\t\t\t\t// Values are sources (prefixed with `options.srcPrefix`); One source per destination\n\t\t\t\t// e.g. 'node_modules/chai/lib/chai.js' will be copied to 'test/js/libs/chai.js'\n\t\t\t\t'libs/chai.js': 'chai/lib/chai.js',\n\t\t\t\t'mocha/mocha.js': 'libs/mocha/mocha.js',\n\t\t\t\t'mocha/mocha.css': 'libs/mocha/mocha.css'\n\t\t\t}\n\t\t},\n\t\t// Javascript\n\t\tlibs: {\n\t\t\toptions: {\n\t\t\t\tdestPrefix: 'public/js/libs'\n\t\t\t},\n\t\t\tfiles: {\n\t\t\t\t'jquery.js': 'jquery/jquery.js',\n\t\t\t\t'require.js': 'requirejs/require.js'\n\t\t\t},\n\t\t},\n\t\tplugins: {\n\t\t\toptions: {\n\t\t\t\tdestPrefix: 'public/js/plugins'\n\t\t\t},\n\t\t\tfiles: {\n\t\t\t\t// Make dependencies follow your naming conventions\n\t\t\t\t'jquery.chosen.js': 'chosen/public/chosen.js'\n\t\t\t}\n\t\t},\n\t\t// Less\n\t\tless: {\n\t\t\toptions: {\n\t\t\t\tdestPrefix: 'less'\n\t\t\t},\n\t\t\tfiles: {\n\t\t\t\t// If either the src or the dest is not present,\n\t\t\t\t// the specified location will be used for both.\n\t\t\t\t// In other words, this will copy\n\t\t\t\t// 'npm_components/bootstrap/less/dropdowns.less' to 'less/bootstrap/less/dropdowns.less'\n\t\t\t\t// See http://gruntjs.com/configuring-tasks#files for recommended files formats\n\t\t\t\tsrc: 'bootstrap/less/dropdowns.less'\n\t\t\t}\n\t\t},\n\t\t// Images\n\t\timages: {\n\t\t\toptions: {\n\t\t\t\tdestPrefix: 'public/images'\n\t\t\t},\n\t\t\tfiles: {\n\t\t\t\t'account/chosen-sprite.png': 'chosen/public/chosen-sprite.png',\n\t\t\t\t'account/chosen-sprite@2x.png': 'chosen/public/chosen-sprite@2x.png'\n\t\t\t}\n\t\t},\n\t\t// Entire folders\n\t\tfolders: {\n\t\t\tfiles: {\n\t\t\t\t// Note: when copying folders, the destination (key) will be used as the location for the folder\n\t\t\t\t'public/js/libs/lodash': 'lodash',\n\t\t\t\t// The destination can also be a folder\n\t\t\t\t// Note: if the basename of the location does not have a period('.'),\n\t\t\t\t// it is assumed that you'd like a folder to be created if none exists\n\t\t\t\t// and the source filename will be used\n\t\t\t\t'public/js/libs': 'lodash/dist/lodash.js'\n\t\t\t}\n\t\t},\n\t\t// Glob patterns\n\t\tglob: {\n\t\t\tfiles: {\n\t\t\t\t// When using glob patterns, destinations are *always* folder names\n\t\t\t\t// into which matching files will be copied\n\t\t\t\t// Also note that subdirectories are **not** maintained\n\t\t\t\t// if a destination is specified\n\t\t\t\t// For example, one of the files copied here is\n\t\t\t\t// 'lodash/dist/lodash.js' -> 'public/js/libs/lodash/lodash.js'\n\t\t\t\t'public/js/libs/lodash': 'lodash/dist/*.js'\n\t\t\t}\n\t\t},\n\t\t// Glob without destination\n\t\tglobSrc: {\n\t\t\toptions: {\n\t\t\t\tdestPrefix: 'public/js/libs'\n\t\t\t},\n\t\t\t// By not specifying a destination, you are denoting\n\t\t\t// that the lodash directory structure should be maintained\n\t\t\t// when copying.\n\t\t\t// For example, one of the files copied here is\n\t\t\t// 'lodash/dist/lodash.js' -> 'public/js/libs/lodash/dist/lodash.js'\n\t\t\tsrc: 'lodash/**/*.js'\n\t\t},\n\t\t// Main pragma\n\t\t// Adding :main to the end of a source path will retrieve the main file(s) for that package\n\t\t// If the main property is not specified by a package, npmcopy will fail\n\t\tmain: {\n\t\t\tsrc: 'jquery.minlight:main',\n\t\t\tdest: 'public/js/plugins/'\n\t\t}\n\t}\n});\n```\n\n## Contributing\nFollow the same coding style present in the repo and add tests for any bug fix or feature addition.\n\nSee the [CONTRIBUTING.md](https://github.com/timmywil/grunt-npmcopy/blob/master/CONTRIBUTING.md) for more info.\n\n## Release History\n\n- **0.1.0** (*6-23-2014*) First Release\n\n## License\nCopyright (c) 2014 Timmy Willison. Licensed under the MIT license.\n",
  "readmeFilename": "README.md",
  "_id": "grunt-npmcopy@0.1.0",
  "_shasum": "a409d25c7bf778303f6b9180547d6780434c757f",
  "_from": "grunt-npmcopy@^0.1.0",
  "_resolved": "https://registry.npmjs.org/grunt-npmcopy/-/grunt-npmcopy-0.1.0.tgz"
}
